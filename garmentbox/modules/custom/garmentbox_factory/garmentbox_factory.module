<?php
/**
 * @file
 * Code for the Garmentbox Factory feature.
 */

include_once 'garmentbox_factory.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function garmentbox_factory_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_access().
 *
 * Hide the order status when craeting a new production order.
 */
function garmentbox_factory_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op != 'edit' || $field['field_name'] != 'field_order_status' || $entity->type != 'production_order') {
    return;
  }

  // Check if creating a new production order.
  if (empty($entity->nid)) {
    return FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function garmentbox_factory_form_production_order_node_form_alter(&$form, &$form_state) {
  // The field is disabled in garmentbox_inventory_field_access().
  $form['field_delivery_date']['#access'] = TRUE;

  $production_order_nid = empty($form['#node']->nid) ? NULL : $form['#node']->nid;

  $season_nid = $form['field_season'][LANGUAGE_NONE]['#default_value'][0];

  // Set a default factory, if the node is new, and no factory given in the URL.
  if (!$form['field_factory'][LANGUAGE_NONE]['#default_value']) {
    // Find the first factory node ID.
    foreach (array_keys($form['field_factory'][LANGUAGE_NONE]['#options']) as $key) {
      if (is_numeric($key)) {
        break;
      }
    }
    if (empty($key)) {
      return;
    }
    $form['field_factory'][LANGUAGE_NONE]['#default_value'] = $key;
  }
  $factory_nid = $form['field_factory'][LANGUAGE_NONE]['#default_value'];
  $item_variant_nids = garmentbox_factory_get_factory_item_variants($season_nid, $factory_nid);
  $inventory_line_nids = garmentbox_factory_get_production_order_inventory_lines($item_variant_nids, $production_order_nid);
  $raw_data = garmentbox_factory_production_order_items_data($production_order_nid ? 'edit' : 'create', $item_variant_nids, $inventory_line_nids);
  // Dummy inputs, that will actually be added manually inside
  // inventory_lines_table as checkboxes.
  // Add an option to select no lines.
  $inventory_line_nids[''] = '';
  $form['production_order_inventory_lines'] = array(
    '#type' => 'hidden',
    '#options' => drupal_map_assoc($inventory_line_nids),
  );
  // Add dummy inputs for the "Add more items" size fields.
  $form['variant_new_inventory'] = array(
    '#type' => 'hidden',
  );
  $form_state['item_variants'] = $item_variant_nids;

  $vocabulary = taxonomy_vocabulary_machine_name_load('size');
  $header = array();
  $header[] = t('Include in order');
  $header[] = t('Item variation');
  foreach (taxonomy_get_tree($vocabulary->vid) as $term) {
    $header[] = $term->name;
  }
  $header[] = t('Fabric');
  $header[] = t('Production cost');
  $header[] = t('Add more items');

  $form['inventory_lines_table'] = array(
    '#theme' => 'table',
    '#rows' => garmentbox_factory_production_order_items($raw_data),
    '#header' => $header,
    '#weight' => 50,
    '#attributes' => array('id' => 'inventory-lines-table'),
  );

  $options = array(
    'absolute' => TRUE,
    'query' => array(
      'field_season' => $season_nid,
    ),
  );
  $settings = array(
    'url' => url($_GET['q'], $options),
    'inventory_lines_data' => $raw_data,
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'garmentbox_factory') . '/production_order_items.js',
    array(
      'data' => array('garmentbox_factory' => $settings),
      'type' => 'setting',
    ),
    drupal_get_path('module', 'format_number') . '/format_number.js',
    array(
      'data' => array('format_number' => format_number_get_options()),
      'type' => 'setting',
    ),
  );

  // Validation for the custom quantity fields.
  $form['#validate'][] = 'garmentbox_factory_form_production_order_node_form_validate';

  $form['add_variant_button'] = array(
    '#markup' => l(t('Add a variant'), '', array('attributes' => array('id' => 'add-variant'))),
    '#weight' => 55,
  );

  $form['total_items'] = array(
    '#title' => t('Total items'),
    '#type' => 'textfield',
    '#disabled' => TRUE,
    '#size' => 10,
    '#weight' => 60,
  );

  $form['production_price'] = array(
    '#title' => t('Production price'),
    '#type' => 'textfield',
    '#disabled' => TRUE,
    '#size' => 10,
    '#weight' => 65,
  );
}

/**
 * Validate handler.
 *
 * Validate the new inventory forms manually.
 */
function garmentbox_factory_form_production_order_node_form_validate(&$form, &$form_state) {
  foreach ($form_state['values']['variant_new_inventory'] as $nid => $size_data) {
    foreach ($size_data as $tid => $quantity) {
      if (!$quantity) {
        continue;
      }

      // Make sure the quantity is a positive integer.
      if (!is_numeric($quantity) || (int)$quantity != $quantity || $quantity < 0) {
        // TODO: When this error is applied, it causes the following notice on
        // the next refresh on node/add/production-prder:
        // Notice: Array to string conversion in drupal_attributes() (line 2303 of [...]/www/includes/common.inc).
        form_set_error('variant_new_inventory', t('Quantity must be a positive integer.'));
      }
    }
  }
}

/**
 * Fetch the item-variants of a given season and factory.
 *
 * @param $factory_nid
 *   Factory node ID.
 * @param $season_nid
 *   Season node ID.
 *
 * @return
 *   Array of item variants node IDs.
 */
function garmentbox_factory_get_factory_item_variants($season_nid, $factory_nid) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'item_variant')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_factory', 'target_id', $factory_nid)
    ->fieldCondition('field_reference_hierarchy', 'target_id', $season_nid)
    ->propertyOrderBy('title')
    ->execute();

  return !empty($result['node']) ? array_keys($result['node']) : array();
}

/**
 * Fetch the inventory lines related to the given item variants.
 *
 * @param $nids
 *   Item variant node IDs.
 * @param $production_order_nid
 *   The production order being editted.
 *
 * @return
 *   Array of inventory lines node IDs.
 */
function garmentbox_factory_get_production_order_inventory_lines($item_variant_nids, $production_order_nid = NULL) {
  $nids = array();

  $term = taxonomy_get_term_by_name('Future production', 'inventory_type');
  $tid = key($term);

  $query = db_select('node', 'n');
  $query->innerJoin('field_data_field_item_variant', 'iv', 'iv.entity_id = n.nid');
  $query->innerJoin('field_data_field_inventory_type', 'it', 'it.entity_id = n.nid');
  // Left joining on production order for fetching also lines without prodiction
  // order.
  $query->leftJoin('field_data_field_production_order', 'po', 'po.entity_id = n.nid');
  $query->addField('n', 'nid');
  $query
    ->condition('n.type', 'inventory_line')
    ->condition('n.status', NODE_PUBLISHED)
    ->condition('iv.entity_type', 'node')
    ->condition('iv.field_item_variant_target_id', $item_variant_nids, 'IN')
    ->condition('it.entity_type', 'node')
    // Fetch either the lines that are attached to the current production order,
    // or the lines that are not attached to any production order.
    ->condition(db_or()
      ->condition(db_and()
        ->condition('po.entity_type', 'node')
        ->condition('po.field_production_order_target_id', $production_order_nid)
      )
      // When fetching an inventory line that is not attached to the production
      // order, check that its type is 'Future production'.
      ->condition(db_and()
        ->condition('po.field_production_order_target_id', NULL, 'IS NULL')
        ->condition('it.field_inventory_type_target_id', $tid)
      )
    );

  $result = $query->execute();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  return $nids;
}

/**
 * Build the rows for the inventory items table.
 *
 * @param $raw_data
 *   A prodution order inventory lines data.
 *
 * @return
 *   The production order items table.
 */
function garmentbox_factory_production_order_items($raw_data) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('size');
  $size_tree = taxonomy_get_tree($vocabulary->vid);

  $table = array();
  foreach ($raw_data as $variant_nid => $variant) {
    if (!$variant['lines']) {
      // Variant doesn't have inventory lines.
      continue;
    }

    $row = array(
      'data' => array(),
      'id' => 'variant-' . $variant_nid,
      'class' => array('expandable'),
    );
    $variables = array(
      'element' => array(
        '#attributes' => array('class' => array('triple-checkbox')),
      ),
    );
    $row['data'][] = theme('checkbox', $variables);
    $row['data'][] = array(
      'data' => l($variant['title'], ''),
      'class' => array('item-title'),
    );
    foreach ($size_tree as $term) {
      $row['data'][] = array(
        'data' => t('-'),
        'class' => array('size-quantity'),
        'data-tid' => $term->tid,
      );
    }
    $row['data'][] = garmentbox_item_get_main_material_icon($variant_nid);
    $row['data'][] = array(
      'data' => t('N/A'),
      'class' => array('production-price'),
    );
    $row['data'][] = array(
      'data' => l(t('Add more items'), ''),
      'class' => array('add-inventory-line'),
    );
    $table[] = $row;

    foreach ($variant['lines'] as $inventory_line_nid => $inventory_line) {
      $row = array(
        'data' => array(),
        'ref' => 'variant-' . $variant_nid,
        'class' => array('hidden', 'inventory-line'),
      );

      $variables = array(
        'element' => array(
          '#attributes' => array(
            'name' => "production_order_inventory_lines[$inventory_line_nid]",
            'value' => $inventory_line_nid,
          ),
        ),
      );
      // Determine whether the checkbox is checked.
      if ($inventory_line['checked']) {
        $variables['element']['#attributes']['checked'] = 'checked';
      }

      $row['data'][] = theme('checkbox', $variables);
      $customer = $inventory_line['customer'] ? $inventory_line['customer'] : t('N/A');
      $row['data'][] = t('<b>Customer</b> !customer', array('!customer' => $customer));
      foreach ($size_tree as $term) {
        $row['data'][] =  empty($inventory_line['sizes'][$term->tid]) ? '' : $inventory_line['sizes'][$term->tid];
      }

      $row['data'][] = '';
      $row['data'][] = commerce_currency_format($variant['item_price'] * $inventory_line['items_count'], commerce_default_currency());
      $row['data'][] = '';
      $table[] = $row;
    }

    // Add an hidden "Add more items" row.
    $row = array(
      'data' => array(),
      'ref' => 'variant-' . $variant_nid,
      'class' => array('hidden', 'new-inventory-line'),
    );
    $row['data'][] = '';
    $row['data'][] = t('New items');

    $inputs = _garmentbox_factory_production_order_items_sizes_inputs($variant_nid);
    foreach ($size_tree as $term) {
      $row['data'][] = empty($inputs[$term->tid]) ? '' : $inputs[$term->tid];
    }
    $row['data'][] = '';
    $row['data'][] = array(
      'data' => t('N/A'),
      'class' => array('production-price'),
    );
    $row['data'][] = '';
    $table[] = $row;
  }

  // "Add more items of another variation" row.
  $row = array(
    'data' => array(),
    'class' => array('hidden', 'new-inventory-line', 'other-variant'),
  );
  $row['data'][] = '';
  $row['data'][] = 'variants';
  $row['data'][] = '';;
  $row['data'][] = '';
  $row['data'][] = t('N/A');
  $row['data'][] = '';
  $table[] = $row;

  return $table;
}

/**
 * Fetch the raw data for the inventory lines selecting widget.
 *
 * @param $op
 *   Operation - 'create' or 'edit'.
 * @param $item_variant_nids
 *   Item variants of the current season and factory.
 * @param $inventory_line_nids
 *   The inventory lines related to the given item variants.
 *
 * @return
 *   Inventory lines data grouped by item-variant.
 */
function garmentbox_factory_production_order_items_data($op, $item_variant_nids, $inventory_line_nids) {
  if (empty($item_variant_nids)) {
    return array();
  }

  $data = array();
  foreach ($item_variant_nids as $variant_nid) {
    $wrapper = entity_metadata_wrapper('node', $variant_nid);
    $data[$variant_nid] = array(
      'title' => $wrapper->label(),
      'lines' => array(),
      'item_price' => garmentbox_item_get_variant_price($variant_nid),
    );
  }

  // Fetch inventory lines of a factory.
  foreach (node_load_multiple($inventory_line_nids) as $inventory_line) {
    $wrapper = entity_metadata_wrapper('node', $inventory_line);
    $variant_nid = $wrapper->field_item_variant->getIdentifier();

    $data[$variant_nid]['lines'][$inventory_line->nid] = array(
      'sizes' => array(),
      'items_count' => 0,
      'customer' => '',
      'checked' => TRUE,
    );

    // When creating a new order, all lines are checked by default. When
    // editting, only lines that are already attached are checked.
    if($op == 'edit') {
      $data[$variant_nid]['lines'][$inventory_line->nid]['checked'] = !empty($inventory_line->field_production_order);
    }

    foreach ($wrapper->field_quantity_info as $quantity_wrapper) {
      $size_tid = $quantity_wrapper->field_size->getIdentifier();
      $quantity = $quantity_wrapper->field_quantity_integer->value();

      if (empty($data[$variant_nid]['lines'][$inventory_line->nid]['sizes'][$size_tid])) {
        $data[$variant_nid]['lines'][$inventory_line->nid]['sizes'][$size_tid] = 0;
      }

      $data[$variant_nid]['lines'][$inventory_line->nid]['sizes'][$size_tid] += $quantity;
      $data[$variant_nid]['lines'][$inventory_line->nid]['items_count'] += $quantity;
    }
  }

  // Remove item variants that have no inventory lines.
  foreach ($data as $nid => $variant) {
    if (empty($variant['lines'])) {
      unset($data[$nid]);
    }
  }

  if (empty($inventory_line_nids)) {
    return $data;
  }
  // Fetch inventory lines of a factory.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'order')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_inventory_line_inline', 'target_id', $inventory_line_nids, 'IN')
    ->fieldOrderBy('field_inventory_line_inline', 'target_id')
    ->execute();

  if (empty($result['node'])) {
    return $data;
  }

  $orders = node_load_multiple(array_keys($result['node']));
  foreach ($orders as $order) {
    $wrapper = entity_metadata_wrapper('node', $order);
    $order_link = l($wrapper->field_customer->label(), 'node/' . $order->nid);

    foreach ($wrapper->field_inventory_line_inline as $inventory_line_wrapper) {
      $variant_nid = $inventory_line_wrapper->field_item_variant->getIdentifier();
      $inventory_line_nid = $inventory_line_wrapper->getIdentifier();
      // The order might have variants of different factories. Only consider
      // variants that were selected before.
      if (!empty($data[$variant_nid]['lines'][$inventory_line_nid])) {
        $data[$variant_nid]['lines'][$inventory_line_nid]['customer'] = $order_link;
      }
    }
  }

  return $data;
}

/**
 * Build a mini inventory line form.
 *
 * @param $nid
 *   Item variant node ID.
 */
function _garmentbox_factory_production_order_items_sizes_inputs($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  $items = array();
  foreach ($wrapper->field_size_info as $item_wrapper) {
    $tid = $item_wrapper->field_size->getIdentifier();
    $variables = array(
      'element' => array(
        '#attributes' => array(
          'name' => "variant_new_inventory[$nid][$tid]",
          'size' => 4,
          'class' => array('new-inventory-items'),
          'data-tid' => $tid,
          'title' => $item_wrapper->field_size->label(),
        ),
        '#autocomplete_path' => '',
      ),
    );
    $items[$tid] = theme('textfield', $variables);
  }
  return $items;
}

/**
 * Implements hook_node_insert().
 *
 * When a production order is created, Set the production order reference on
 * the related inventory line nodes.
 */
function garmentbox_factory_node_insert($node) {
  if ($node->type != 'production_order') {
    return;
  }

  foreach ($node->production_order_inventory_lines as $nid) {
    $wrapper = entity_metadata_wrapper('node', $nid);
    $wrapper->field_production_order->set($node->nid);
    $wrapper->save();
  }

  // Handle creation of new inventory lines.
  foreach ($node->variant_new_inventory as $item_variant_nid => $quantity_info) {
    // Check if the variant's has any non-zero quantity.
    $create_inventory_line = FALSE;
    foreach ($quantity_info as $quantity) {
      if ($quantity) {
        $create_inventory_line = TRUE;
      }
    }

    if ($create_inventory_line) {
      garmentbox_factory_create_inventory_line($node->nid, $item_variant_nid, $quantity_info);
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Attach inventory lines to a production order through the hierarchy field.
 */
function garmentbox_factory_node_presave($node) {
  if ($node->type != 'production_order' && $node->type != 'inventory_line') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $nodes = garmentbox_general_get_node_hierarchy($node);
  if (empty($nodes)) {
    return;
  }

  $wrapper->field_reference_hierarchy->set(array_keys($nodes));
}

/**
 * Create a custom inventory line (Through the production order form).
 *
 * @param $production_order_nid
 *   Attach the inventory line to this production order.
 * @param $item_variant_nid
 *   The inventory line's item variant.
 * @param $quantity_info
 *   Array of quantities keyed by size term ID. A new field_quantity_info item will
 *   be created for each entry.
 */
function garmentbox_factory_create_inventory_line($production_order_nid, $item_variant_nid, $quantity_info) {
  $node = new stdClass();
  $node->type = 'inventory_line';
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);

  $wrapper = entity_metadata_wrapper('node', $node);
  // $wrapper->field_production_order->set($production_order_nid);
  $wrapper->field_item_variant->set($item_variant_nid);

  // Create field collection items for the quantity info items.
  foreach ($quantity_info as $tid => $quantity) {
    if (!$quantity) {
      continue;
    }

    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_quantity_info'));
    $field_collection_item->setHostEntity('node', $node);
    $item_wrapper = entity_metadata_wrapper('field_collection_item', $field_collection_item);
    $item_wrapper->field_quantity_integer->set($quantity);
    $item_wrapper->field_size->set($tid);
    $item_wrapper->save();
  }

  $wrapper->save();
}

/**
 * Implements hook_node_update().
 *
 * When a production order is created, Set the production order reference on
 * the related inventory line nodes.
 */
function garmentbox_factory_node_update($node) {
  if ($node->type != 'production_order') {
    return;
  }

  // Remove references from removed inventory lines.
  $stored_inventory_lines = garmentbox_factory_get_production_order_inventory_lines($node->nid);
  foreach($stored_inventory_lines as $nid) {
    if (empty($node->production_order_inventory_lines[$nid])) {
      $wrapper = entity_metadata_wrapper('node', $nid);
      $wrapper->field_production_order->set(NULL);
      $wrapper->save();
    }
  }
}
