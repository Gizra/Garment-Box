<?php
/**
 * @file
 * Code for the Garmentbox Task feature.
 */

include_once 'garmentbox_task.features.inc';


/**
 * Implements hook_node_presave().
 *
 * Populate the Hierarchy reference field based on the selected entity.
 */
function garmentbox_task_node_presave($node) {
  if ($node->type != 'task') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $nids = array_keys(garmentbox_general_get_node_hierarchy($node));
  $wrapper->field_reference_hierarchy->set($nids);
}

/**
 * Implements hook_comment_presave().
 *
 * Save the node task fields according to the saved comment.
 */
function garmentbox_task_comment_presave($comment) {
  $wrapper = entity_metadata_wrapper('comment', $comment);
  $node = $wrapper->node->value();

  $save = FALSE;

  // Set the values from the comment on the task.
  foreach (garmentbox_task_intersect_fields() as $field_name => $field_info) {
    $value = _garmentbox_task_comment_extract_value($comment, $field_info, $field_name);
    $original_value = _garmentbox_task_comment_extract_value($node, $field_info, $field_name);
    // Check if the field was changed on the comment.
    if ($value != $original_value) {
      $save = TRUE;
      $wrapper->node->$field_name->set($value);
    }
  }

  if (!$save) {
    return;
  }

  // Set the revision ID to the node ID before it is saved.
  $wrapper->field_revision_id->set($node->vid);

  $node->revision = TRUE;
  node_save($node);
}

/**
 * Extract a field value from a comment or node.
 * It's impossible to use EntityMetadataWrapper because of the dummy fields that
 * are coppied from the node to the comment.
 *
 * @param $entity
 *   A comment or node.
 * @param $field_info
 *   Field information. See garmentbox_task_intersect_fields().
 * @param $field_name
 *   The field name.
 *
 * @return
 *   The field's value
 */
function _garmentbox_task_comment_extract_value($entity, $field_info, $field_name) {
  if ($field_info['value_key']) {
    if (isset($entity->{$field_name}[LANGUAGE_NONE][0][$field_info['value_key']])) {
      $value = $entity->{$field_name}[LANGUAGE_NONE][0][$field_info['value_key']];
      if (!empty($field_info['convert_to_timestamp'])) {
        $value = strtotime($value);
      }
      return $value;
    }
  }
  else {
    if (isset($entity->$field_name)) {
      return $entity->$field_name;
    }
    elseif (isset($field_info['alternate_field_name']) && isset($entity->{$field_info['alternate_field_name']})) {
      return $entity->{$field_info['alternate_field_name']};
    }
  }
}

/**
 * Implements hook_field_access().
 */
function garmentbox_task_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_revision_id') {
    return FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Assign new tasks to the current user by default.
 */
function garmentbox_task_form_task_node_form_alter(&$form, &$form_state) {
  global $user;
  $form['field_task_assignee'][LANGUAGE_NONE]['#default_value'] = $user->uid;
}

/**
 * Return all the fields the exist in the comment and in the node.
 */
function garmentbox_task_intersect_fields() {
  return array(
    'title' => array(
      'value_key' => NULL,
      'alternate_field_name' => 'subject',
    ),
    'field_task_assignee' => array(
      'value_key' => 'target_id',
    ),
    'field_task_status' => array(
      'value_key' => 'target_id',
    ),
    'field_entity_reference' => array(
      'value_key' => 'target_id',
    ),
    'field_date' => array(
      'value_key' => 'value',
      'convert_to_timestamp' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function garmentbox_task_form_comment_node_task_form_alter(&$form, &$form_state) {
  $node = $form['#node'];

  // Copy task fields into the comment form.
  $temp_form = array();
  field_attach_form('node', $node, $temp_form, $form_state);
  foreach (garmentbox_task_intersect_fields() as $field_name => $field_info) {
    // Ignore the title, as it will be determind by the comment subject.
    if ($field_name == 'title') {
      continue;
    }

    $form[$field_name] = $temp_form[$field_name];
    $form[$field_name]['#weight'] = -5;
  }

  $form['subject']['#default_value'] = $node->title;
}

/**
 * Comment preprocess.
 *
 * Add all the fields that have changed from previous comment.
 */
function garmentbox_task_preprocess_comment(&$variables) {
  $comment = $variables['comment'];
  $node = $variables['node'];
  $variables['changed_fields'] = '';

  $cache = &drupal_static(__FUNCTION__, array());
  // Cache all revisions of the current node.
  if (isset($cache['revisions'])) {
    $revisions = $cache['revisions'];
  }
  else {
    // Load all node revisions.
    $revisions = array();
    foreach (array_keys(node_revision_list($node)) as $vid) {
      $revisions[$vid] = node_load($node->nid, $vid);
    }
    $cache['revisions'] = $revisions;
  }

  if (isset($cache[$node->nid])) {
    $thread = $cache[$node->nid];
  }
  else {
    $thread = comment_get_thread($node, COMMENT_MODE_FLAT, 1000);
    $cache[$node->nid] = $thread;
  }

  // As we already called the non-cached comment_get_thread(), this is
  // a good place to change the permalink text to be the comment number
  // in the thread.
  $key = array_search($comment->cid, $thread);
  $variables['permalink'] = str_replace('Permalink', '#' . $key, $variables['permalink']);

  $wrapper = entity_metadata_wrapper('comment', $comment);
  if (!$comment_vid = $wrapper->field_revision_id->value()) {
    return;
  }

  $node_revision = $revisions[$comment_vid];
  $wrapper = entity_metadata_wrapper('node', $node_revision);

  // Find the task revision that was created after the comment was saved, in
  // order to find the changes that were made with the comment.
  $next_vid = NULL;
  foreach(array_keys($revisions) as $vid) {
    if ($vid == $comment_vid) {
      break;
    }
    $next_vid = $vid;
  }

  $node_next_revision = $revisions[$next_vid];
  $next_wrapper = entity_metadata_wrapper('node', $node_next_revision);

  foreach (garmentbox_task_intersect_fields() as $field_name => $field_info) {
    if ($wrapper->$field_name->value() == $next_wrapper->$field_name->value()) {
      continue;
    }

    $params = array();

    // Fields other than 'title' will be rendered using field_view_field.
    if ($field_name != 'title') {
      $instance = field_info_instance('node', $field_name, $node->type);
      $params['@label'] = $instance['label'];
      $display = $instance['display']['default'];
      $display['label'] = 'hidden';

      $element = field_view_field('node', $node_revision, $field_name, $display);
      $params['@previous'] = strip_tags(render($element));
      $params['@previous'] = str_replace('&nbsp;', ' ', $params['@previous']);
      if (!$params['@previous']) {
        $params['@previous'] = '[' . t('None') . ']';
      }

      $element = field_view_field('node', $node_next_revision, $field_name, $display);
      $params['@current'] = strip_tags(render($element));
      $params['@current'] = str_replace('&nbsp;', ' ', $params['@current']);
    }
    else {
      $params['@label'] = t('Title');
      $params['@previous'] = $node_revision->title;
      $params['@current'] = $node_next_revision->title;
    }

    $variables['changed_fields'] .= '<div class="task-change">' . format_string('@label: @previous Â» @current', $params) . '</div>';
  }
}
