<?php
/**
 * @file
 * Code for the Garmentbox Order feature.
 */

include_once 'garmentbox_order.features.inc';

/**
 * Implements hook_menu().
 */
function garmentbox_order_menu() {
  $items['season/%node/orders'] = array(
    'title callback' => 'garmentbox_order_get_page_title',
    'title arguments' => array(1, 'orders'),
    'page callback' => 'garmentbox_order_get_orders_table',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );

  return $items;
}

/**
 * Build the page title for season order page.
 *
 * @param $node
 *   The season node.
 *
 * @return
 *   The title string.
 */
function garmentbox_order_get_page_title($node) {
  return t('@season - Orders', array('@season' => $node->title));
}

/**
 * Show the orders of a season or item.
 *
 * @param $nid
 *   Season or item node ID.
 *
 * @return
 *   Rendered table with orders info.
 */
function garmentbox_order_get_orders_table($node) {
  // Group the rows by inventory line node.
  if (!$data = garmentbox_order_get_orders_data($node)) {
    return t('No orders created yet.');
  }

  dpm($data);

  $now = time();

  $rows = array();
  $orders = array();

  foreach ($data as $row) {
    if (empty($orders[$row->order_nid])) {
      $orders[$row->order_nid] = array(
        'title' => $row->order_title,
        'total_items' => 0,
        'last_delivery_date' => 0,
        'next_delivery_date' => 0,
        'order_status' => $row->order_status,
        'customer' => $row->customer,
        'customer_nid' => $row->customer_nid,
      );
    }

    if (empty($orders[$row->order_nid]['lines'][$row->nid])) {
      $orders[$row->order_nid]['lines'][$row->nid] = array(
        'variant' => $row->variant,
        'variant_nid' => $row->variant_nid,
        'type' => $row->type,
      );

      foreach($size_tree as $term) {
        $orders[$row->order_nid]['lines'][$row->nid]['sizes'][$term->tid] = 0;
      }

      // Update last and next delivery dates.
      if ($row->delivery_date && $row->delivery_date > $now) {
        if ($row->delivery_date > $orders[$row->order_nid]['last_delivery_date']) {
          // Update the last delivery date that is going to be sent.
          $orders[$row->order_nid]['last_delivery_date'] = $row->delivery_date;
        }

        if (!$orders[$row->order_nid]['next_delivery_date'] || $row->delivery_date < $orders[$row->order_nid]['next_delivery_date']) {
          // Update the next delivery date that is going to be sent.
          $orders[$row->order_nid]['next_delivery_date'] = $row->delivery_date;
        }
      }
    }
    $orders[$row->order_nid]['lines'][$row->nid]['sizes'][$row->size_tid] += $row->quantity;
    $orders[$row->order_nid]['total_items'] += $row->quantity;
  }

  drupal_add_js(drupal_get_path('module', 'garmentbox_order') . '/js/orders_table.js');

  $header = array(
    t('Order'),
    t('Customer'),
    t('Total price'),
    t('Total items'),
    t('Last delivery date'),
    t('Next delivery date'),
    t('Status'),
  );

  $inventory_header = array();
  $inventory_header[] = t('Variation');
  foreach ($size_tree as $term) {
    $inventory_header[] = $term->name;
  }
  $inventory_header[] = t('Total');
  $inventory_header[] = t('Status');

  $order_table = array();
  foreach ($orders as $order_nid => $order) {
    $order_row = array(
      'data' => array(),
      'class' => array('expandable'),
      'ref' => 'order-inventory-' . $order_nid,
    );
    $params = array(
      'attributes' => array(
        'class' => array('expander', 'collapsed'),
      )
    );
    $expand_link = l('', url(''), $params);
    $order_row['data'][] = $expand_link . l($order['title'], 'node/' . $order_nid);
    $order_row['data'][] = l($order['customer'], 'node/' . $order['customer_nid']);
    $order_row['data'][] = t('N/A');
    $order_row['data'][] = $order['total_items'];
    $order_row['data'][] = $order['last_delivery_date'] ? format_date($order['last_delivery_date'], 'medium_no_time') : t('N/A');
    $order_row['data'][] = $order['next_delivery_date'] ? format_date($order['next_delivery_date'], 'medium_no_time') : t('N/A');
    $order_row['data'][] = $order['order_status'];

    $order_table[] = $order_row;

    $inventory_table = array();
    foreach ($order['lines'] as $inventory_line) {
      $row = array();
      $row[] = l($inventory_line['variant'], 'node/' . $inventory_line['variant_nid']);

      $total = 0;
      foreach($size_tree as $term) {
        $total += $inventory_line['sizes'][$term->tid];
        $row[] = $inventory_line['sizes'][$term->tid];
      }

      $row[] = array('data' => $total, 'class' => array('emphasized'));
      $row[] = $inventory_line['type'];

      $inventory_table[] = $row;
    }
    $variables = array(
      'header' => $inventory_header,
      'rows' => $inventory_table,
    );

    $order_table[] = array(
      'data' => array(
        array(
          'data' => theme('table', $variables),
          'colspan' => 7,
        ),
      ),
      'class' => array('hidden'),
      'id' => 'order-inventory-' . $order_nid,
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $order_table,
    'attributes' => array('id' => 'orders'),
  );
  return theme('table', $variables);
}

/**
 * Fetch the raw data for the orders table.
 *
 * @param $node
 *   Season node.
 *
 * @return
 *   Array with the query result.
 */
function garmentbox_order_get_orders_data($node) {
 // Get all the orders that belong to the season.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'order')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_season', 'target_id', $node->nid)
    ->execute();

  if (empty($result['node'])) {
    return;
  }

  $orders = node_load_multiple(array_keys($result['node']));

  // Prepare the data array.
  $data = array();
  foreach ($orders as $order) {
    $wrapper = entity_metadata_wrapper('node', $order);
    $data[$order->nid] = array();

    $customer_label = $wrapper->field_customer->label();
    $customer_url = entity_uri('node', $wrapper->value());

    $data[$order->nid]['order_info'] = array(
      'customer' => l($customer_label, $customer_url['path'], $customer_url['options']),
      'status' => $wrapper->field_order_status->label(),
      'last_delivery_timestamp' => 0,
      'next_delivery_timestamp' => 0,
    );

    foreach ($wrapper->field_inventory_line_inline as $wrapper_li) {
      $node = $wrapper_li->value();
      $delivery_timestamp = $wrapper_li->field_delivery_date->value();

      $data[$order->nid]['inventory_lines'][$node->nid] = array(
        // The title of the item-variant.
        'title' => $wrapper_li->field_item_variant->label(),
        'delivery_date' => $delivery_timestamp,
        'defective' => $wrapper_li->field_defective->value(),
      );

      // Update last and next delivery dates.
      if ($delivery_timestamp > $now) {
        if ($delivery_timestamp > $data[$order->nid]['order_info']['last_delivery_timestamp']) {
          // Update the last delivery date that is going to be sent.
          $data[$order->nid]['order_info']['last_delivery_timestamp'] = $delivery_timestamp;
        }

        if (!$data[$order->nid]['order_info']['next_delivery_timestamp'] || $delivery_timestamp < $data[$order->nid]['order_info']['next_delivery_timestamp']) {
          // Update the next delivery date that is going to be sent.
          $data[$order->nid]['order_info']['next_delivery_timestamp'] = $delivery_timestamp;
        }
      }

      $data[$order->nid]['quantity_info'] = array();

      // Add the size and quantity info. We can't use the wrapper as we
      // have revisions.
      $total_quantity = 0;
      if (!empty($node->field_quantity_info[LANGUAGE_NONE][0]['value'])) {
        foreach ($node->field_quantity_info[LANGUAGE_NONE] as $delta => $value) {
          $item_wrapper = entity_metadata_wrapper('field_collection_item', $value['revision_id']);
          $size = $item_wrapper->field_size->label();
          $quantity = $item_wrapper->field_quantity_integer->value();
          $data[$order->nid]['quantity_info']['size'][$size] = $quantity;
          $total_quantity += $quantity;
        }
      }
      $data[$order->nid]['quantity_info']['total_quantity'] = $total_quantity;
    }
  }

  return $data;
}
