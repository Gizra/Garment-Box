<?php

/**
 * Implements hook_views_api().
 */
function message_dashboard_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("version" => "3.0");
  }
}

/**
 * Get message IDs that belong to a user.
 * @param $account
 * @param $max
 */
function message_dashboard_get_ids($account = NULL, $max = 20) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }

  if (isset($cache[$account->uid])) {
    return $cache[$account->uid];
  }

  $cache[$account->uid] = array();
  $mids = array();

  // Get messages assigned to the user.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('uid', $account->uid, '=')
    ->propertyOrderBy('mid', 'DESC')
    ->range(0, $max)
    ->execute();

  if (!empty($result['message'])) {
    $mids = array_keys($result['message']);
  }

  if (module_exists('og')) {
    $mids = array_merge($mids, message_dashboard_get_ids_og($account, $max));
  }

  // Allow implementing modules to add their message IDs.
  $result = module_invoke_all('message_dashboard_get_ids');
  $mids = array_merge($mids, $result);

  // Allow implementing modules to alter the result.
  $context = array(
    'account' => $account,
    'max' => $max,
  );
  // Remove duplicates
  $mids = array_unique($mids);
  // Sort the result DESC.
  rsort($mids);

  drupal_alter('message_dashboard_get_ids', $mids, $context);
  $cache[$account->uid] = $mids;
  return $mids;
}

/**
 * Wrapper function to get IDs as string (i.e. 1,2,5)
 *
 * This can be used as Views' contextual filters.
 *
 * @param unknown_type $account
 * @param unknown_type $max
 */
function message_dashboard_get_ids_string($account = NULL, $max = 20) {
  return implode(',', message_dashboard_get_ids($account, $max));
}

function message_dashboard_get_ids_og($account, $max) {
  $mids = array();
  $gids = og_get_entity_groups('user', $account);

  if ($gids) {
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'og_membership')
      ->propertyCondition('entity_type', 'message', '=')
      ->propertyCondition('etid', $gids, 'IN')
      ->propertyOrderBy('id', 'DESC')
      ->range(0, $max)
      ->execute();

    if (!empty($result['og_membership'])) {
      $og_memberships = og_membership_load_multiple(array_keys($result['og_membership']));
      foreach ($og_memberships as $og_membership) {
        $mids[] = $og_membership->etid;
      }
    }
  }
  return $mids;
}