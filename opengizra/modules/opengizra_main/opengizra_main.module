<?php

include_once('opengizra_main.features.inc');

/**
 * Implements hook_enable().
 *
 * TODO: Move to profile file.
 */
function opengizra_main_enable() {
  // Disable bartik.
  theme_disable(array('bartik'));

  // Enable our themes.
  theme_enable(array('ninesixty', 'ninesixty_sub'));

  // Set the default theme.
  variable_set('theme_default', 'ninesixty_sub');

  // Enable node view page override by Page manager module.
  variable_set('page_manager_node_view_disabled', $status);
}

/**
 * Implements hook_init().
 */
function opengizra_main_init() {
  $group = og_context();
  if (!$group) {
    return;
  }

  $list = og_get_hierarchy($group->entity_type, $group->etid, array('sanitize' => FALSE));
  if (!$list) {
    return;
  }

  $node = menu_get_object();

  foreach ($list as $gid => $label) {
    if (!empty($node) && $gid == $group->gid && $group->entity_type == 'node' && $group->etid == $node->nid) {
      continue;
    }
    $wrapper = entity_metadata_wrapper('group', $gid);
    $breadcrumb[$gid] = l($label, $wrapper->url->value());
  }
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb = array_reverse($breadcrumb);
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implements of hook_ctools_plugin_directory().
 */
function opengizra_main_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
  elseif ($module == 'panels' && $plugin == 'styles') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_custom_theme().
 *
 * Make sure admin pages are served in "seven" theme.
 */
function opengizra_main_custom_theme() {
  $item = menu_get_item();
  if (strpos($item['path'], 'admin') === 0) {
    return 'seven';
  }
}

/**
 * Get node from the menu system.
 */
function opengizra_main_get_node() {
  $item = menu_get_item();
  $node = menu_get_object('node');
  // Although we have a node object, make sure we are on node view.
  if ($node && $item['path'] == 'node/%') {
    return $node;
  }

  // The path may not be %node, but in fact is a ctools-context, so extract the
  // node from it. We check only the 1st position (e.g. node/%/foo).
  if (empty($item['map'][1]) || !is_object($item['map'][1]) || !($item['map'][1] instanceof ctools_context)) {
    return;
  }

  // Check the context is a node type. We check only path similar to node/%/foo
  // and don't traverse over the whole arguments, as it might be a page manager
  // page passing multiple nodes (e.g. some/path/with/%node/%node). Implementing
  // modules wanting to handle the above example, should implement their own
  // context handler.
  $context = clone $item['map'][1];
  if (empty($context->type[0]) || $context->type[0] != 'entity:node') {
    return;
  }

  return $context->data;
}