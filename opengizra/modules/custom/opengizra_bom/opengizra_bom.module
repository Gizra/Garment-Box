<?php
/**
 * @file
 * Code for the Opengizra BOM.
 */


/**
 * Implement hook_field_formatter_info().
 */
function opengizra_bom_field_formatter_info() {
  return array(
    'opengizra_bom_table' => array(
      'label' => t('BOM table'),
      'field types' => array('field_collection'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function opengizra_bom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $settings = $display['settings'];

  switch ($display['type']) {
    case 'opengizra_bom_table':
      $field_name = $field['field_name'];
      $dummy_display = $display;
      $dummy_display['type'] = 'field_collection_table_view';
      $element = field_view_field($entity_type, $entity, $field_name, $dummy_display);

      // Inject header.
      $last_col = array_pop($element[0]['#header']);

      $total = 0;

      foreach ($element[0]['#header'] as $key => $value) {
        if ($value['class'] == 'field_material') {
          $material_delta = $key;
          break;
        }
      }


      $element[0]['#header'][] = array(
        'data' => t('Price'),
        'class' => 'field_price',
      );

      $element[0]['#header'][] = $last_col;

      // Inject rows.
      foreach ($element[0]['#rows'] as $key => $row) {
        $last_col = array_pop($row['data']);

        $wrapper = entity_metadata_wrapper('field_collection_item', $row['data'][$material_delta]['data']['#object']->item_id);
        $collection_item = $wrapper->field_material->field_source_info->value();
        $field_price = field_view_field('field_collection_item', $collection_item, 'field_price', array('label' => 'hidden', 'type' => 'commerce_price_formatted_components'));

        $row['data'][] = array(
          'data' => $field_price,
          'class' => 'field_price',
        );
        $row['data'][] = $last_col;
        $element[0]['#rows'][$key] = $row;

        // Calculate the total.
        $collection_wrapper = $wrapper->field_material->field_source_info;
        $unit_price = $collection_wrapper->field_price->amount->value();

        $material_unit = $wrapper->field_material->field_source_info->field_unit->value();
        $material_length_unit = $wrapper->field_material->field_source_info->field_length_unit->value();
        $bom_unit = $collection_wrapper->field_unit->value();
        if ($material_unit == $bom_unit) {
          $total += $material_unit * $unit_price;
        }
        elseif ($material_length_unit) {
          // Use the conversion given in the material.
          $total += $bom_unit / $material_length_unit * $unit_price;

        }
      }

      $element['1']['#markup'] = t('Total: @total', array('@total' => 0));

      return $element;
  }
}
