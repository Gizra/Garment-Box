<?php
/**
 * @file
 * Code for the Opengizra BOM.
 */


/**
 * Implement hook_field_formatter_info().
 */
function opengizra_bom_field_formatter_info() {
  return array(
    'opengizra_bom_table' => array(
      'label' => t('BOM table'),
      'field types' => array('field_collection'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function opengizra_bom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $settings = $display['settings'];

  switch ($display['type']) {
    case 'opengizra_bom_table':
      $field_name = $field['field_name'];
      $dummy_display = $display;
      $dummy_display['type'] = 'field_collection_table_view';
      $element = field_view_field($entity_type, $entity, $field_name, $dummy_display);

      // Inject header.
      $last_col = array_pop($element[0]['#header']);

      $total = 0;

      foreach ($element[0]['#header'] as $key => $value) {
        if ($value['class'] == 'field_material') {
          $material_delta = $key;
          break;
        }
      }


      $element[0]['#header'][] = array(
        'data' => t('Price'),
        'class' => 'field_price',
      );

      $element[0]['#header'][] = $last_col;

      $wrapper = entity_metadata_wrapper($entity_type, $entity);

      // Inject rows.
      foreach ($element[0]['#rows'] as $key => $row) {
        $last_col = array_pop($row['data']);
return;
        $material_wrapper = entity_metadata_wrapper('field_collection_item', $row['data'][$material_delta]['data']['#object']->item_id);
        $collection_item = $material_wrapper->field_material->field_source_info->value();
        $field_price = field_view_field('field_collection_item', $collection_item, 'field_price', array('label' => 'hidden', 'type' => 'commerce_price_formatted_amount'));

        $row['data'][] = array(
          'data' => $field_price,
          'class' => 'field_price',
        );
        $row['data'][] = $last_col;
        $element[0]['#rows'][$key] = $row;

        // Calculate the total.
        $collection_wrapper = $material_wrapper->field_material->field_source_info;
        $unit_price = $collection_wrapper->field_price->amount->value();

        $material_unit = $material_wrapper->field_material->field_source_info->field_unit->value();
        $material_length_unit = $material_wrapper->field_material->field_source_info->field_length_unit->value();
        $material_length = $material_wrapper->field_material->field_source_info->field_length->value();

        $bom_unit = $collection_wrapper->field_unit->value();
        $bom_quantity = $wrapper->field_bom_info->get($key)->field_quantity->value();
        if ($material_unit == $bom_unit) {
          $total += $bom_quantity * $unit_price;
        }
        elseif ($material_length_unit) {
          // Use the conversion given in the material.
          $total += $bom_quantity / $material_length * $unit_price;
        }
      }

      // Re-create the element, and add the total.
      $table = $element[0];
      $element[0] = array();

      $element[0]['table'] = $table;
      $element[0]['total']['#markup'] = t('Total: @total', array('@total' => commerce_currency_format($total, 'USD')));
      return $element;
  }
}

/**
 *
 */
function opengizra_bom_get_variant_bom_price($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // Iterate the BOM.
  $price = 0;
  for ($delta = 0; $delta < $wrapper->field_bom_info->count(); $delta++) {
    $price += opengizra_bom_get_material_price($wrapper->field_bom_info->get($delta)->value());
  }

  return $price;
}

/**
 *
 */
function opengizra_bom_get_material_price($collection_item) {
  $wrapper = entity_metadata_wrapper('field_collection_item', $collection_item);

  // Get the price per
  $m_unit = $wrapper->field_material_item->field_unit->value();
  $m_length_unit = $wrapper->field_material_item->field_length_unit->value();
  $m_length_unit_conversion = $wrapper->field_material_item->field_length_unit->field_conversion_ratio->value();
  $m_length = $wrapper->field_material_item->field_length->value();
  $m_price = $wrapper->field_material_item->field_price->value();
  $bom_unit = $wrapper->field_unit->value();
  $bom_unit_conversion = $wrapper->field_unit->field_conversion_ratio->value();

  $length_price = opengizra_bom_get_length_price($m_price['amount'], $m_unit, $m_length, $m_length_unit_conversion / $bom_unit_conversion);
  $bom_quantity = $wrapper->field_quantity->value();
  return $length_price * $bom_quantity;
}

/**
 *
 */
function opengizra_bom_get_length_price($price, $unit, $length, $length_ratio) {
  $wrapper = entity_metadata_wrapper('taxonomy_term', $unit);

  // If the material price is given in mass, convert it to price per length.
  if ($wrapper->field_unit_type->value() == 'mass') {
    $price /= $length;
    $price *= $length_ratio;
  }

  return $price;
}

/**
 * Implements hook_entity_info_alter().
 */
function opengizra_bom_entity_info_alter(&$entity_info) {
  $entity_info['field_collection_item']['label callback'] = 'opengizra_bom_field_collection_item_label';
}

/**
 * Label callback.
 *
 * Rebulid the label for source info field collections to present the material
 * and the vendor.
 *
 * @see opengizra_bom_entity_info_alter().
 */
function opengizra_bom_field_collection_item_label($entity) {
  if ($entity->field_name != 'field_source_info') {
     // Fall to the default value, which is the item ID.
    return $entity->item_id;
  }

  $material = '';
  // TODO Check why sometimes host_entity is null.
  if ($host_entity = $entity->hostEntity()) {
    $material = $host_entity->title;
  }
  $wrapper = entity_metadata_wrapper('field_collection_item', $entity);
  $vendor = $wrapper->field_vendor->label();

  return check_plain("$material [$vendor]");
}
